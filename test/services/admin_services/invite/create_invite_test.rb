require 'test_helper'

class AdminServices::Invite::CreateInviteTest < ActiveSupport::TestCase

  setup do
    @shop = create(:shop, name: 'shop_name')
    @email = 'some@email.com'
    @user = create(:user, shop: @shop)
    @url_building_proc = lambda {|user_object|
                                 "I'm generated by proc"}
  end

  test 'should create user and send invite with valid params' do
    assert_equal 1, User.count
    ActionMailer::Base.deliveries = []
    service = AdminServices::Invite::CreateInvite
              .new(email:             @email,
                   shop_id:           @shop.id,
                   url_building_proc: @url_building_proc)
              .run
    assert service.success?
    assert_equal service.link, "I'm generated by proc"
    assert_equal 1, ActionMailer::Base.deliveries.count
    assert_equal 2, User.count
  end

  test 'should not create user and send invite with existing email' do
    ActionMailer::Base.deliveries = []
    assert_equal 1, User.count
    service = AdminServices::Invite::CreateInvite
              .new(email:             @user.email,
                   shop_id:           @shop.id,
                   url_building_proc: @url_building_proc)
              .run
    refute service.success?
    assert_equal 1, User.count
    assert_equal 0, ActionMailer::Base.deliveries.count
  end

  test 'should not create user and send invite with blank params' do
    ActionMailer::Base.deliveries = []
    assert_equal 1, User.count
    service = AdminServices::Invite::CreateInvite.new.run
    refute service.success?
    assert_equal 1, User.count
    assert_equal 0, ActionMailer::Base.deliveries.count
    assert_equal 1, service.errors.count
    assert_includes service.errors.full_messages, "Email is invalid"
  end
end
